#1
import yfinance as yf

# Crear objeto Ticker para Tesla (TSLA)
tesla = yf.Ticker("TSLA")

# Extraer datos históricos con periodo máximo
tesla_data = tesla.history(period="max")

# Reiniciar índice y mostrar primeras filas
tesla_data.reset_index(inplace=True)
tesla_data.head()
#2
import requests
from bs4 import BeautifulSoup
import pandas as pd

url = "https://www.macrotrends.net/stocks/charts/TSLA/tesla/revenue"

# Simular un navegador con headers
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
}

response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, "html.parser")

# Buscar la tabla correcta (puede haber múltiples tablas con la misma clase)
tablas = soup.find_all("table", class_="historical_data_table")

# Seleccionar la tabla de ingresos trimestrales (generalmente la segunda tabla)
if len(tablas) >= 2:
    tabla = tablas[1]
    tesla_revenue = pd.read_html(str(tabla))[0]
    tesla_revenue.columns = ["Date", "Revenue"]
    # Limpiar y convertir datos
    tesla_revenue["Revenue"] = tesla_revenue["Revenue"].str.replace("$", "", regex=False).str.replace(",", "", regex=False)
    tesla_revenue = tesla_revenue.dropna()  # Eliminar filas vacías
    tesla_revenue["Revenue"] = pd.to_numeric(tesla_revenue["Revenue"], errors="coerce")
    print(tesla_revenue.tail())
else:
    print("No se encontró la tabla de ingresos.")
#3
# Crear objeto Ticker para GameStop (GME)
gme = yf.Ticker("GME")

# Extraer datos históricos
gme_data = gme.history(period="max")

# Reiniciar índice
gme_data.reset_index(inplace=True)
gme_data.head()
#4
# URL de ingresos de GameStop
url_gme = "https://finance.yahoo.com/quote/GME/financials"

# Extraer tabla de ingresos
response_gme = requests.get(url_gme)
soup_gme = BeautifulSoup(response_gme.text, "html.parser")
tabla_ingresos_gme = soup_gme.find("div", class_="M(0) Whs(n)")

# Convertir a DataFrame
gme_ingresos = pd.read_html(str(tabla_ingresos_gme))[0]
gme_ingresos.columns = ["Concepto", "2022", "2021", "2020"]
#5
import matplotlib.pyplot as plt

# Gráfico de precios de acciones vs ingresos
plt.figure(figsize=(12, 6))
plt.plot(tesla_data["Date"], tesla_data["Close"], label="Precio de Acción")
plt.title("Tesla: Precio de Acción vs Ingresos")
plt.xlabel("Fecha")
plt.ylabel("Precio (USD)")

# Añadir ingresos al gráfico (ejemplo simplificado)
plt.twinx()
plt.plot(tesla_ingresos["2022"], label="Ingresos 2022", color="red")
plt.ylabel("Ingresos (Millones USD)")
plt.legend()
plt.show()
#6
# Gráfico para GameStop
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.widgets import RangeSlider  # <-- Use RangeSlider instead

# ====== FETCH GAMESTOP DATA ======
gme = yf.Ticker("GME")
gme_data = gme.history(period="max")
gme_data.reset_index(inplace=True)

# Example revenue data (in millions USD)
gme_revenue = pd.DataFrame({
    "Year": [2019, 2020, 2021, 2022],
    "Revenue": [8280, 6470, 5090, 5930]
})

# ====== PLOTTING FUNCTION ======
def make_graph(stock_data, revenue_data, title):
    stock_data = stock_data[stock_data["Date"].dt.year >= 2006]
    
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 8))
    fig.suptitle(title, fontsize=16)
    plt.subplots_adjust(bottom=0.25)
    
    # Stock Price Plot
    ax1.plot(stock_data["Date"], stock_data["Close"], color="blue")
    ax1.set_ylabel("Price (USD)", color="blue")
    
    # Revenue Plot
    ax2.bar(revenue_data["Year"], revenue_data["Revenue"], color="orange")
    ax2.set_xlabel("Year")
    ax2.set_ylabel("Revenue (Millions USD)", color="orange")
    
    # Add RangeSlider (key fix)
    ax_slider = plt.axes([0.2, 0.1, 0.6, 0.03])
    slider = RangeSlider(
        ax=ax_slider,
        label="Date Range",
        valmin=stock_data["Date"].min().timestamp(),
        valmax=stock_data["Date"].max().timestamp(),
        valinit=(stock_data["Date"].min().timestamp(), stock_data["Date"].max().timestamp()),
    )
    
    # Update function
    def update(val):
        start = pd.to_datetime(val[0], unit="s")
        end = pd.to_datetime(val[1], unit="s")
        mask = (stock_data["Date"] >= start) & (stock_data["Date"] <= end)
        ax1.clear()
        ax1.plot(stock_data["Date"][mask], stock_data["Close"][mask], color="blue")
        ax1.set_ylabel("Price (USD)", color="blue")
        fig.canvas.draw()
    
    slider.on_changed(update)
    plt.show()

# ====== GENERATE GRAPH ======
make_graph(gme_data, gme_revenue, "GameStop Stock Analysis (2006-2023)")
